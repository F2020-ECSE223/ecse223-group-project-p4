

class Appointment {
 
	AppointmentStatus {
    
	   	Booked {
			//change optional services or appointment time
			//must cancel appointment and rebook to change service
			modifyAppointmentTime (Date systemDate, TimeSlot newSlot) [atleastDayBefore(systemDate)]/ {
	      		doUpdateAppointment(newSlot);
	      	} -> Booked; 
	      	
	      	modifyOptionalServices(List<ComboItem> newServices, List<ComboItem> removedServices) / {
	      		changeOptServices(newServices, removedServices);
	        } -> Booked;
	      	
	      	modifyAppointmentTime (Date systemDate, TimeSlot newSlot) [!atleastDayBefore(systemDate)]/ {
	      		rejectUpdateAppointment();
	      	} -> Booked;
	
	      	cancelAppointment (Date systemDate) [atleastDayBefore(systemDate)] / {
	     	 	doCancelAppointment();
	     	} -> Final;
	      
	      	cancelAppointment (Date systemDate) [!atleastDayBefore(systemDate)] / {
	      		rejectCancelAppointment();
	     	 } -> Booked;
	      
	    	startAppointment(Date systemDate, Time systemTime) [isAfterStartTime(systemDate, systemTime)]/{
	    		doStartAppointment();
	    	} -> InProgress;
	    	
	    	startAppointment(Date systemDate, Time systemTime) [!isAfterStartTime(systemDate, systemTime)]/{
	    		rejectStartAppointment();
	    	} -> Booked;
	      
	      	noShow(Customer customer) / {
	      		addNoShow(customer);
	      		removeAppointment();
	      	} -> Final;
	    }
	    
	    InProgress {
	    
	    	finishAppointment() / {
	    		removeAppointment();
	    	}->Final;
	    		
	    	modifyOptionalServices(List<ComboItem> newServices, List<ComboItem> removedServices) /{
	      		changeOptServices(newServices, removedServices);
	        } -> InProgress;
	       
	    }
	    
	  }


	private void doStartAppointment(){
	}
	
	private void rejectStartAppointment(){
		throw new RuntimeException("Not yet time for appointment.");
	}
	

	private void doCancelAppointment() {
		FlexiBook flexiBook = this.getFlexiBook();
		this.delete(); 
	}
	
	private void rejectCancelAppointment() {
		throw new RuntimeException("Cannot cancel an appointment on the appointment date");
	}
	
	private void doUpdateAppointment(TimeSlot newSlot) {
		this.setTimeSlot(newSlot);
	}
	
	private void rejectUpdateAppointment() {
		throw new RuntimeException("Cannot change appointment date and time on the appointment date");
	}
	
	private void changeOptServices(List<ComboItem> newServices, List<ComboItem> removedServices) {
		for(int i = 0; i < newServices.size(); i++){
			this.addChosenItem(newServices.get(i));
		}
		for(int i = 0; i < removedServices.size(); i++){
			this.removeChosenItem(removedServices.get(i));
		}
	}
	
	private void addNoShow(Customer customer) {
		Integer noShows = customer.getNoShows();
		noShows++;
		customer.setNoShows(noShows);
	}
	
	private boolean isAfterStartTime(Date systemDate, Time systemTime) {
		if(systemDate.equals(this.getTimeSlot().getStartDate()) && !systemTime.before(this.getTimeSlot().getStartTime())){
			return true;
		}
		else{
		 	return false;
		}
	}
	
	private boolean atleastDayBefore(Date systemDate) {
		if(systemDate.before(this.getTimeSlot().getStartDate())){
			return true;
		}
		else{
		 	return false;
		}
	}
	
	private void removeAppointment(){
		this.delete();
	} 











}
